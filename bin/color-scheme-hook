#!/usr/bin/python3
# Copyright 2020 Sebastian Wiesner <sebastian@swsnr.de>
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

"""Trigger certain actions when the Gnome color scheme changes.

Specifically,

- update the Helix theme and reload all running Helix instances, and
- set the legacy Gtk theme to Adwaita dark if dark mode is enabled.
"""

import contextlib
import fcntl
from pathlib import Path
from subprocess import run
from typing import Never, IO, Optional
from collections.abc import Iterator
from contextlib import contextmanager
from functools import partial
from threading import Lock

from gi.repository import Gio, GLib


class GlobalLock:
    """A system-wide global lock around a lock file."""

    def __init__(self: "GlobalLock", lock_file: IO) -> None:
        """Initialize a global lock with the given lock file."""
        self._internal_lock = Lock()
        self._lock_file = lock_file

    @contextmanager
    def acquire(self: "GlobalLock") -> Iterator[None]:
        """Acquire this global lock as a context manager."""
        # First acquire an internal lock to make sure that only one thread
        # locks the global lock file; since file locks are process-wide we might
        # otherwise deadlock ourselves.
        with self._internal_lock:
            try:
                fcntl.flock(self._lock_file, fcntl.LOCK_EX)
                yield
            finally:
                fcntl.flock(self._lock_file, fcntl.LOCK_UN)


def log(msg: str) -> None:
    """Log the given message to standard output."""
    print(msg, flush=True)  # noqa: T201


def set_helix_theme(update_lock: GlobalLock, theme: str) -> None:
    """Set the Helix color theme."""
    log(f"Setting helix color theme {theme}")
    # Link the appropriate Helix theme
    config_dir = Path(GLib.get_user_config_dir()) / "helix"
    theme_file = config_dir / "themes" / "swsnr-light-dark.toml"
    theme_definition = (Path(
        "/usr/lib/helix/runtime/themes") / theme).with_suffix(".toml")
    log(f"Linking {theme_file} to {theme_definition}")
    with update_lock.acquire():
        theme_file.unlink(missing_ok=True)
        theme_file.symlink_to(theme_definition)
        log("Refreshing configuration of all running helix processes")
        # pkill fails if there are no matching processes, but that's totally
        # expected so we deliberately don't use check=True here.
        run(["/usr/bin/pkill", "-USR1", "helix"])  # noqa: PLW1510


def set_legacy_gtk_theme(theme: Optional[str]) -> None:
    """Set a legacy Gtk theme to the given theme."""
    settings = Gio.Settings.new("org.gnome.desktop.interface")
    if theme is None:
        log("Setting gtk-theme back to default")
        settings.reset("gtk-theme")
    else:
        log(f"Setting gtk-theme to {theme}")
        settings.set_string("gtk-theme", theme)


def update_color_scheme(update_lock: GlobalLock, scheme: str) -> None:
    """Update color scheme to the given `scheme`.

    Update the Helix color theme file, and reload configuration of all running
    Helix instances.
    """
    helix_theme = "onelight"
    legacy_gtk_theme = None
    if scheme == "prefer-dark":
        helix_theme = "onedark"
        legacy_gtk_theme = "Adwaita-dark"
    set_helix_theme(update_lock, helix_theme)
    set_legacy_gtk_theme(legacy_gtk_theme)


def handle_settings_signal(
        update_lock: GlobalLock,
        _settings: Never, _sender: str, signal: str, args: GLib.Variant) -> None:
    """Handle any signal from the settings portal.

    React on the `SettingsChanged` signal, and trigger color scheme actions when
    the color scheme setting changed.
    """
    if signal == "SettingChanged":
        namespace, key, value = args.unpack()
        if namespace == "org.gnome.desktop.interface" and key == "color-scheme":
            update_color_scheme(update_lock, value)


def set_initial_color_scheme(
        update_lock: GlobalLock, settings: Gio.DBusProxy) -> None:
    """Set color scheme initially."""
    color_scheme = settings.Read(  # type: ignore[reportGeneralTypeIssues]
        "(ss)", "org.gnome.desktop.interface", "color-scheme")
    update_color_scheme(update_lock, color_scheme)


def main() -> None:
    """Run this application."""
    runtime_dir = Path(GLib.get_user_runtime_dir())
    lock_file = runtime_dir / "swsnr-dotfiles-color-scheme-hook.lock"

    with lock_file.open("w") as lock_fd:
        update_lock = GlobalLock(lock_fd)
        loop = GLib.MainLoop()
        bus = Gio.bus_get_sync(Gio.BusType.SESSION, None)
        settings = Gio.DBusProxy.new_sync(
            bus, Gio.DBusProxyFlags.DO_NOT_LOAD_PROPERTIES,
            None,
            "org.freedesktop.portal.Desktop",
            "/org/freedesktop/portal/desktop",
            "org.freedesktop.portal.Settings", None)
        settings.connect("g_signal", partial(handle_settings_signal, update_lock))
        GLib.timeout_add(0, lambda: set_initial_color_scheme(update_lock, settings))
        loop.run()


if __name__ == "__main__":
    with contextlib.suppress(KeyboardInterrupt):
        main()
