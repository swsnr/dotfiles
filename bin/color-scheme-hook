#!/usr/bin/python3
# Copyright 2020 Sebastian Wiesner <sebastian@swsnr.de>
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

"""Trigger certain actions when the Gnome color scheme changes.

Specifically,

- update the Helix theme and reload all running Helix instances.
"""

import contextlib
import fcntl
from pathlib import Path
from subprocess import run
from typing import Never
from contextlib import contextmanager
from threading import Lock

from gi.repository import Gio, GLib


RUNTIME_DIR = Path(GLib.get_user_runtime_dir())
LOCK_FILE = RUNTIME_DIR / "swsnr-dotfiles-color-scheme-hook.lock"
LOCK_FILE_OBJ = open(LOCK_FILE, mode="w")
INTERNAL_LOCK = Lock()


def log(msg: str) -> None:
    """Log the given message to standard output."""
    print(msg, flush=True)


@contextmanager
def globally_lock_color_scheme_update():
    """Acquire the global color scheme lock for a process.

    This lock guards against concurrent instances of this script.
    """
    # First acquire an internal lock to make sure that only on thread locks the
    # global lock file; since file locks are process-wide we might otherwise
    # deadlock ourselves.
    with INTERNAL_LOCK:
        try:
            fcntl.flock(LOCK_FILE_OBJ, fcntl.LOCK_EX)
            yield
        finally:
            fcntl.flock(LOCK_FILE_OBJ, fcntl.LOCK_UN)


def update_color_scheme(scheme: str) -> None:
    """Update color scheme to the given `scheme`.

    Update the Helix color theme file, and reload configuration of all running
    Helix instances.
    """
    helix_theme = "onelight"
    if scheme == "prefer-dark":
        helix_theme = "onedark"
    log(f"Using helix color theme {helix_theme} for Gnome color scheme {scheme}")
    # Link the appropriate Helix theme
    config_dir = Path(GLib.get_user_config_dir()) / "helix"
    theme_file = config_dir / "themes" / "swsnr-light-dark.toml"
    theme_definition = (Path(
        "/usr/lib/helix/runtime/themes") / helix_theme).with_suffix(".toml")
    log(f"Linking {theme_file} to {theme_definition}")
    with globally_lock_color_scheme_update():
        theme_file.unlink(missing_ok=True)
        theme_file.symlink_to(theme_definition)
        log("Refreshing configuration of all running helix processes")
        run(["/usr/bin/pkill", "-USR1", "helix"])


def handle_settings_signal(
        _settings: Never, _sender: str, signal: str, args: GLib.Variant) -> None:
    """Handle any signal from the settings portal.

    React on the `SettingsChanged` signal, and trigger color scheme actions when
    the color scheme setting changed.
    """
    if signal == "SettingChanged":
        namespace, key, value = args.unpack()
        if namespace == "org.gnome.desktop.interface" and key == "color-scheme":
            update_color_scheme(value)


def set_initial_color_scheme(settings: Gio.DBusProxy) -> None:
    """Set color scheme initially."""
    color_scheme = settings.Read("(ss)", "org.gnome.desktop.interface", "color-scheme")
    update_color_scheme(color_scheme)


def main() -> None:
    """Run this application."""
    loop = GLib.MainLoop()
    bus = Gio.bus_get_sync(Gio.BusType.SESSION, None)
    settings = Gio.DBusProxy.new_sync(
        bus, Gio.DBusProxyFlags.DO_NOT_LOAD_PROPERTIES,
        None,
        "org.freedesktop.portal.Desktop",
        "/org/freedesktop/portal/desktop",
        "org.freedesktop.portal.Settings", None)
    settings.connect("g_signal", handle_settings_signal)
    GLib.timeout_add(0, lambda: set_initial_color_scheme(settings))
    loop.run()


if __name__ == "__main__":
    with contextlib.suppress(KeyboardInterrupt):
        main()
