#!/usr/bin/env python3
# Copyright Sebastian Wiesner <sebastian@swsnr.de>
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.


import logging
import json
import sys
from pathlib import Path
from datetime import date, datetime
from subprocess import CompletedProcess, run, PIPE
from argparse import ArgumentParser


LOG = logging.getLogger()
USE_FLATPAK = False

class ColoredFormatter(logging.Formatter):
    _grey = '\x1b[37m'
    _green = '\x1b[32m'
    _yellow = '\x1b[33m'
    _red = '\x1b[31m'
    _bold_red = '\x1b[31m'
    _reset = '\x1b[0m'
    _format = '{message}'

    FORMATS = {
        logging.DEBUG: _grey + _format + _reset,
        logging.INFO: _green + _format + _reset,
        logging.WARNING: _yellow + _format + _reset,
        logging.ERROR: _red + _format + _reset,
        logging.CRITICAL: _bold_red + _format + _reset
    }

    def format(self, record):
        log_fmt = self.FORMATS.get(record.levelno)
        formatter = logging.Formatter(fmt=log_fmt, style='{')
        return formatter.format(record)


def run_paperwork_raw(command: list[str]) -> CompletedProcess[str]:
    if USE_FLATPAK:
        full_command = ['flatpak', 'run', '--command=paperwork-json', 'work.openpaper.Paperwork']
    else:
        full_command = ['paperwork-json']
    full_command.extend(command)
    LOG.debug(f'Running command {full_command}')
    child = run(full_command, stdout=PIPE, text=True)
    LOG.debug(f'Command {full_command} exited with {child.returncode} and output {child.stdout!r}')
    return child

def run_paperwork(command: list[str]):
    child = run_paperwork_raw(command)
    results = json.loads(child.stdout)
    if child.returncode != 0:
        reason = results['reason']
        raise ValueError(f'paperwork failed with exit code {child.returncode}: {reason}')
    return results


def find_documents(query: str) -> list[str]:
    return run_paperwork(['search', query, '--limit=100'])


def get_date_from_docid(docid: str) -> date:
    parts = docid.split('_', 1)
    return datetime.strptime(parts[0], '%Y%m%d').date()


def main():
    parser = ArgumentParser()
    parser.add_argument('-d', '--directory', type=Path)
    parser.add_argument('basename')
    parser.add_argument('query')
    parser.add_argument('-v', '--verbose', action='store_true')

    args = parser.parse_args()

    LOG.setLevel(logging.DEBUG if args.verbose else logging.INFO)
    stderr = logging.StreamHandler(stream=sys.stderr)
    stderr.setLevel(logging.DEBUG)
    stderr.setFormatter(ColoredFormatter())
    logging.getLogger().addHandler(stderr)

    LOG.debug(f'Arguments: {args}')

    directory = args.directory or Path(".")

    doc_ids = find_documents(args.query)
    docs_with_date = [(i, get_date_from_docid(i)) for i in doc_ids]
    for (doc_id, date) in docs_with_date:
        name = f'{date:%Y-%m-%d}-{args.basename}-{doc_id}.pdf'
        target = directory / name
        LOG.info(f'Exporting {doc_id} to {target}')
        run_paperwork_raw(['export', '--filters', 'unmodified_pdf',
                           '--out', str(target.absolute()), doc_id])


if __name__ == '__main__':
    main()
