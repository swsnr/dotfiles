#!/usr/bin/env python3
# Copyright Sebastian Wiesner <sebastian@swsnr.de>
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

import json
import sys
import os
import imghdr
from argparse import ArgumentParser
from datetime import date
from pathlib import Path
from platform import system
from subprocess import run, Popen, DEVNULL
from textwrap import fill

import keyring
import dateutil.parser


def set_wallpaper(image_path):
    if os.environ.get('XDG_CURRENT_DESKTOP', '') in ['GNOME', 'i3']:
        for namespace in {'org.gnome.desktop.background', 'org.gnome.desktop.screensaver'}:
            run(['gsettings', 'set', namespace,
                 'picture-uri', image_path.as_uri()], check=True)
    else:
        raise NotImplementedError(
            'Cannot set wallpaper in current environment')


def open_file(path):
    cmds = {
        'Darwin': ['open', str(path)],
        'Linux': ['xdg-open', str(path)]
    }
    return Popen(cmds[system()], stdout=DEVNULL, stderr=DEVNULL)


def get_pictures_directory():
    if system() == 'Darwin':
        return Path.home() / 'Pictures'
    elif system() == 'Windows':
        # See <https://stackoverflow.com/a/35851955>
        import ctypes
        from ctypes import windll, wintypes
        from uuid import UUID

        class GUID(ctypes.Structure):
            _fields_ = [
                ("Data1", wintypes.DWORD),
                ("Data2", wintypes.WORD),
                ("Data3", wintypes.WORD),
                ("Data4", wintypes.BYTE * 8)
            ]

            def __init__(self, uuidstr):
                uuid = UUID(uuidstr)
                ctypes.Structure.__init__(self)
                self.Data1, self.Data2, self.Data3, \
                    self.Data4[0], self.Data4[1], rest = uuid.fields
                for i in range(2, 8):
                    self.Data4[i] = rest >> (8-i-1)*8 & 0xff

        SHGetKnownFolderPath = windll.shell32.SHGetKnownFolderPath
        SHGetKnownFolderPath.argtypes = [
            ctypes.POINTER(GUID), wintypes.DWORD,
            wintypes.HANDLE, ctypes.POINTER(ctypes.c_wchar_p)
        ]

        def _get_known_folder_path(uuidstr):
            pathptr = ctypes.c_wchar_p()
            guid = GUID(uuidstr)
            if SHGetKnownFolderPath(ctypes.byref(guid), 0, 0, ctypes.byref(pathptr)):
                raise ctypes.WinError()
            return pathptr.value

        return Path(_get_known_folder_path('{3B193882-D3AD-4eab-965A-69829D1FB59F}'))
    else:
        process = run(['xdg-user-dir', 'PICTURES'],
                      check=True, capture_output=True, encoding='utf-8')
        return Path(process.stdout.splitlines()[0])


def get_default_directory():
    return get_pictures_directory() / 'APOD'


def lookup_api_key():
    return keyring.get_password('api.nasa.gov', 'swsnr')


class APODError(Exception):
    def __init__(self, code, message, response):
        super().__init__(code, message, response)

    @property
    def code(self):
        return self.args[0]

    @property
    def message(self):
        return self.args[1]

    def __str__(self):
        return '{} (code {})'.format(self.message, self.code)


def get_info(api_key, date):
    url = "https://api.nasa.gov/planetary/apod?api_key={}&date={}&hd=True".format(
        api_key, date.isoformat())
    process = run(['curl', '-sS', url], check=True, capture_output=True)
    info = json.loads(process.stdout.strip())
    if info.get('code'):
        raise APODError(info['code'], info['msg'], info)
    elif 'error' in info:
        raise APODError(info['error']['code'], info['error']['message'], info)
    else:
        return info


def is_image_file(path, date):
    return path.name.startswith('{}-'.format(date.isoformat())) and imghdr.what(path)


def get_image_file(directory, date):
    return next(filter(lambda e: is_image_file(e, date), directory.iterdir()), None)


def download_image(directory, image_info):
    if image_info['media_type'] != 'image':
        raise ValueError('Media type {} not supported'.format(
            image_info['media_type']))
    url = image_info.get('hdurl', image_info['url'])
    basename = url.split('/')[-1]
    filename = '{}-{}'.format(image_info['date'], basename)
    target = directory / filename
    run(['curl', '-f', '-o', str(target), url], check=True)
    info = """\
# {}

Copyright {}

{}
""".format(image_info['title'],
           image_info.get('copyright', 'NASA Public Domain'),
           fill(image_info['explanation'], width=80, break_long_words=False))
    meta_target = target.with_suffix('.md')
    meta_target.write_text(info, encoding='utf-8')
    print('APOD written to {}'.format(target))
    return (target, meta_target)


def parse_date(s):
    return dateutil.parser.parse(s).date()


def main():
    parser = ArgumentParser(description='Download APOD images')
    parser.add_argument('--api-key', help='API key')
    parser.add_argument('-w', '--wallpaper', help='Set APOD image as wallpaper',
                        action='store_true')
    parser.add_argument('--directory', help='Target directory', type=Path)
    parser.add_argument('dates', metavar='YYYY-MM-DD', help='Date to download',
                        type=parse_date, nargs='*', default=[date.today()])
    parser.add_argument('-o', '--open', help='Open after downloading',
                        action='store_true')
    args = parser.parse_args()
    if not args.api_key:
        args.api_key = lookup_api_key()
        if not args.api_key:
            parser.error('No API key given and no API key in credential store')
    if not args.directory:
        args.directory = get_default_directory()
    if args.wallpaper and len(args.dates) != 1:
        parser.error('Cannot set multiple images as wallpaper')

    for date_to_download in args.dates:
        image = get_image_file(args.directory, date_to_download)
        if not image:
            info = get_info(args.api_key, date_to_download)
            (image, _) = download_image(args.directory, info)

        if args.open:
            open_file(image)

        if args.wallpaper:
            set_wallpaper(image)
            print('Set wallpaper to {}'.format(image))


if __name__ == '__main__':
    try:
        main()
    except APODError as error:
        sys.exit('APOD error: {}'.format(error))
    except ValueError as error:
        sys.exit('Error: {}'.format(error))
    except KeyboardInterrupt:
        pass
