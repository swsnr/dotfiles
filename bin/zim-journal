#!/usr/bin/env python3
# Copyright 2020 Sebastian Wiesner <sebastian@swsnr.de>
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

"""Open a day in the zim journal."""

import os
from pathlib import Path
from datetime import date, datetime, timedelta, timezone
from configparser import ConfigParser
from subprocess import Popen, DEVNULL
from locale import LC_MESSAGES
from gi.repository import Gio, GLib


FLATPAK = "org.zim_wiki.Zim"
USE_FLATPAK = False
XDG_CONFIG_HOME = Path(os.environ.get("XDG_CONFIG_HOME", Path.home() / ".config"))


def get_zim_notebook_name(*, flatpak: bool) -> str:
    """Get the name of the main zim notebookself.

    If `flatpak` is `True` use the setting from the flatpak installation of zim,
    otherwise use the regular installation.
    """
    if flatpak:
        config_home = Path.home() / ".var" / "app" / FLATPAK / "config"
    else:
        config_home = XDG_CONFIG_HOME
    notebooks_list = config_home / "zim" / "notebooks.list"
    config = ConfigParser(interpolation=None)
    config.read(notebooks_list)
    return config["Notebook 1"]["name"]


LocaleCategory = int


def get_session_locale(category: LocaleCategory) -> str:
    """Get the Gnome Session locale."""
    bus = Gio.bus_get_sync(Gio.BusType.SESSION, None)
    # We need no properties and no signals here so speed up
    flags = Gio.DBusProxyFlags.DO_NOT_CONNECT_SIGNALS | \
        Gio.DBusProxyFlags.DO_NOT_LOAD_PROPERTIES
    session = Gio.DBusProxy.new_sync(bus, flags, None,
                                     "org.gnome.SessionManager",
                                     "/org/gnome/SessionManager",
                                     "org.gnome.SessionManager")
    return session.GetLocale("(i)", category)


ISO_FRIDAY = 5


def next_workday(date: date) -> date:
    """Get the next workday after the given date.

    In other words, get the next day ignoring weekends.
    """
    weekday = date.isoweekday()
    if weekday < ISO_FRIDAY:
        return date + timedelta(days=1)

    return date + timedelta(days=8-weekday)


def main() -> None:
    """Run this program."""
    from argparse import ArgumentParser

    parser = ArgumentParser()
    parser.add_argument(
        "date", choices=["today", "tomorrow", "next_workday"], nargs=1)
    args = parser.parse_args()

    today = datetime.now(tz=timezone.utc).date()
    page = {
        "today": today,
        "tomorrow": today + timedelta(days=1),
        "next_workday": next_workday(today),
    }[args.date[0]].strftime("%Y:%m:%d")

    env = dict(os.environ)
    # Explicitly enforce the session message locale to work around ZIM issue
    # https://github.com/zim-desktop-wiki/zim-desktop-wiki/issues/1152
    try:
        env["LC_MESSAGES"] = get_session_locale(LC_MESSAGES)
    except GLib.Error:
        env["LC_MESSAGES"] = "de_DE.utf8"
    # Open todays journal page
    command = ["flatpak", "run", "org.zim_wiki.Zim"] if USE_FLATPAK else ["zim"]
    command.append(get_zim_notebook_name(flatpak=USE_FLATPAK))
    command.append(f"Journal:{page}")
    Popen(command, env=env, stdout=DEVNULL, stderr=DEVNULL)


if __name__ == "__main__":
    main()
