#!/usr/bin/env python3
# Copyright 2020 Sebastian Wiesner <sebastian@swsnr.de>
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.


"""Get the background colour of the current xterm-like terminal."""


import sys
import os
import termios
import tty
import re
from pathlib import Path
from collections.abc import Iterator
from select import epoll, EPOLLIN, EPOLLONESHOT
from contextlib import contextmanager
from argparse import ArgumentParser
from typing import Literal


@contextmanager
def raw(fd: int) -> Iterator[None]:
    """Switch `filelike` to raw mode for the inner block."""
    attrs = termios.tcgetattr(fd)
    try:
        tty.setraw(fd, when=termios.TCSANOW)
        yield
    finally:
        termios.tcsetattr(fd, termios.TCSANOW, attrs)


def read_background_colour(tty: Path) -> bytes | None:
    """Read background color of the TTY device at `tty`."""
    with tty.open("rb", buffering=0) as source, epoll() as poll:
        poll.register(source.fileno(), EPOLLONESHOT | EPOLLIN)
        with tty.open("wb", buffering=0) as sink, raw(sink.fileno()):
            sink.write(b"\x1b]11;?\x1b\\")
            sink.flush()
            # Check if the terminal replied; some terminals (VSCode looking at you)
            # report being xterm but never answer the escape sequences
            if poll.poll(0.1):
                buffer = []
                # Read all bytes up to terminator
                while True:
                    c = source.read(1)
                    # If we see a backslash check the preceding character to
                    # figure out if we've seen \x1b\\, that is, ST, which denotes
                    # the end of the reply.
                    if c == b"\\" and buffer and buffer[-1] == b"\x1b":
                        return b"".join(buffer) \
                            .removeprefix(b"\x1b]11;").removesuffix(b"\x1b")

                    buffer.append(c)
            else:
                return None


def luminance(r: float, g: float, b: float) -> float:
    """Calculate the luminance from the given RGB color."""
    # Derive luminance from RGB, as per ITU-R BT.709, 3 Signal format, item 3.2
    return r * 0.2126 + g * 0.7152 + b * 0.0722


LIGHT_LUMINANCE_THRESHOLD = 128

ColorTheme = Literal["light"] | Literal["dark"]

def theme(r: float, g: float, b: float) -> ColorTheme:
    """Derive desired color theme from the given RGB color.

    Return 'light' if the luminance of the given RGB color is smaller 128, else
    return 'dark'.
    """
    is_light = LIGHT_LUMINANCE_THRESHOLD < luminance(r, g, b)
    return "light" if is_light else "dark"


def main() -> None:
    """Run this program."""
    parser = ArgumentParser()
    parser.add_argument("-t", "--theme", action="store_true")

    args = parser.parse_args()

    term = os.environ.get("TERM", "")
    if term == "wezterm" or "xterm" in term.lower():
        colour = read_background_colour(Path(os.ctermid()))
    else:
        sys.exit(f"Terminal reports no xterm compatibility ($TERM={term})")
    if not colour:
        sys.exit("Terminal did not report colour")

    if args.theme:
        match = re.search(
            b"^rgb:([^/]{2})[^/]*/([^/]{2})[^/]*/([^/]{2})[^/]*$", colour)
        if not match:
            print(f"Failed to parse color from {colour}", file=sys.stderr) # noqa: T201
            sys.exit(1)
        r, g, b = match.groups()
        print(theme(int(r, 16), int(g, 16), int(b, 16))) # noqa: T201
    else:
        sys.stdout.buffer.write(colour)
        sys.stdout.buffer.write(b"\n")


if __name__ == "__main__":
    main()
